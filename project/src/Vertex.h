#pragma once

#include <string>
#include <vector>
#include <GL/glew.h>

enum VertexAttributeType
{
	kVertexAttributeType_Byte = GL_BYTE,
	kVertexAttributeType_UnsignedByte = GL_UNSIGNED_BYTE,
	kVertexAttributeType_Short = GL_SHORT,
	kVertexAttributeType_UnsignedShort = GL_UNSIGNED_SHORT,
	kVertexAttributeType_Int = GL_INT,
	kVertexAttributeType_UnsignedInt = GL_UNSIGNED_INT,
	kVertexAttributeType_Float = GL_FLOAT,
	kVertexAttributeType_Double = GL_DOUBLE
};

class VertexAttribute
{
	std::string m_Name;
	VertexAttributeType m_Type;
	unsigned int m_Count;
	bool m_Normalized;
	size_t m_Size;

public:
	VertexAttribute(std::string name, VertexAttributeType type, unsigned int count, bool normalized, size_t size);
	const std::string &GetName() const;
	VertexAttributeType GetType() const;
	unsigned int GetCount() const;
	bool IsNormalized() const;
	size_t GetSize() const;
};

struct IVertex
{
	float Position[3];
};

class IVertexInfo
{
public:
	IVertexInfo(IVertexInfo &) = default;
	IVertexInfo &operator=(const IVertexInfo &) = default;

	IVertexInfo(IVertexInfo &&) = delete;
	IVertexInfo &operator=(const IVertexInfo &&) = delete;

	virtual ~IVertexInfo() = default;
	virtual std::vector<VertexAttribute> GetAttributes() const;
};

// TODO: Make Buffer class... (for OpenGL)

// TODO: VertexArray which is generated by VertexInfo/attributes -- class that has AddAttribute etc.

template<typename TVertex, typename TVertexInfo>
class VertexBuffer
{
	const void *m_Data;
	unsigned int m_Count;

	void create()
	{
		
	}

	void destroy()
	{
		
	}

public:
	VertexBuffer(unsigned int count) // TODO: Use Vertex Array?
		: m_Data(nullptr), m_Count(count)
	{
	}

	VertexBuffer(const void *data, unsigned int count)
		: m_Data(data), m_Count(count)
	{
	}

	~VertexBuffer()
	{
		// ...
	}

	VertexBuffer(const VertexBuffer &) = delete;
	VertexBuffer &operator=(const VertexBuffer &) = delete;

	VertexBuffer(const VertexBuffer &&) = delete;
	VertexBuffer &operator=(const VertexBuffer &&) = delete;

	const void *GetData() const
	{
		return m_Data;
	}

	void SetData(const void *data, unsigned int count)
	{
		// TODO: ...
	}

	unsigned int GetCount() const
	{
		return m_Count;
	}
};